name: Create Release Draft

on:
  workflow_dispatch:
  push:
    tags: ["[0-9]+.[0-9]+.[0-9]+*"]

jobs:
  armv7:
    name: Build Armv7
    runs-on: ubuntu-latest
    # after every step is finished,export to PATH will be clear,so in next step ,need re-export
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up cargo
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # clone and patch anki library  
      - name: Clone patch Anki
        run: |
          sh ./scripts/clone_patch_anki
          ls anki

      # this may not succeed?
      - name: Add cargo taget armv7
        run: rustup target add armv7-unknown-linux-musleabihf

      - name: Download arm-musl-gcc
        run: wget  -P $HOME https://musl.cc/arm-linux-musleabihf-cross.tgz

      - name: unpack arm-musl-gcc
        run: tar -zxvf $HOME/arm-linux-musleabihf-cross.tgz -C $HOME
      # used to compile openssl
      - name: Download arm-gnueabihf-gcc 
        run: |
          git clone --depth 1 https://github.com/raspberrypi/tools.git $HOME/rpitools
          export PATH="$HOME/rpitools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin:$PATH"
          arm-linux-gnueabihf-gcc -v

      - name: Download and unpack lib openssl
        run: | 
          wget --no-check-certificate https://www.openssl.org/source/old/1.1.1/openssl-1.1.1f.tar.gz
          tar -zxvf openssl-1.1.1f.tar.gz -C .
          ls .
      
      - name: Compile openssl
        run: | 
          export PATH="$HOME/rpitools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin:$PATH"
          arm-linux-gnueabihf-gcc -v

          export MACHINE=armv7
          export ARCH=arm
          export CC=arm-linux-gnueabihf-gcc
          cc -v

          mkdir -p $HOME/openssl
          cd openssl-1.1.1f
          ./config shared --prefix=$HOME/openssl && make 
          make install
          cd ..
          ls $HOME/openssl/include
# build staticly linked binary for armv7 or aarch64
      - name: Build 
        run: | 
          ls $HOME/openssl/lib
          export PATH="$HOME/rpitools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin:$PATH"
          export CC=arm-linux-gnueabihf-gcc
          
          export OPENSSL_LIB_DIR=$HOME/openssl/lib
          export OPENSSL_INCLUDE_DIR=$HOME/openssl/include
          export OPENSSL_STATIC=true

          export PATH="$HOME/arm-linux-musleabihf-cross/bin:$PATH"
          
          cargo build --target armv7-unknown-linux-musleabihf --release --features tls
  
       - name: Create output directory
        run: mkdir output

      - name: Copy files to output
        run: |
          cp target/armv7-unknown-linux-musleabihf/release/ankisyncd output/
         

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: armv7
          path: output/*

  linux:
    name: Build Linux
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up cargo
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      # clone and patch anki library  
      - name: Clone patch Anki
        run: |
          sh ./scripts/clone_patch_anki
          ls anki

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --features tls

      # - name: Strip binaries (nu)
      #   run: strip target/release/

      - name: Create output directory
        run: mkdir output

      - name: Copy files to output
        run: |
          cp target/release/ankisyncd output/
         

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: linux
          path: output/*

  macos:
    name: Build macOS
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up cargo
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      # clone and patch anki library  
      - name: Clone patch Anki
        run: |
          sh ./scripts/clone_patch_anki
          ls anki

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --features tls 

      # - name: Strip binaries (nu)
      #   run: strip target/release/nu

      - name: Create output directory
        run: mkdir output

      - name: Copy files to output
        run: |
          cp target/release/ankisyncd output/
         

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: macos
          path: output/*

  windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up cargo
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # clone and patch anki library  
      - name: Clone patch Anki
        run: |
          sh ./scripts/clone_patch_anki
          ls anki
          
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --features tls

      # - name: Strip binaries (nu.exe)
      #   run: strip target/release/nu.exe


      - name: Create output directory
        run: mkdir output

      - name: Copy files to output
        run: |
          cp target\release\ankisyncd.exe output\
         

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: windows
          path: output\*

  release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs:
      - linux
      - macos
      - windows
      - armv7
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Determine Release Info
        id: info
        env:
          GITHUB_REF: ${{ github.ref }}
        run: |
          VERSION=${GITHUB_REF##*/}
          MAJOR=${VERSION%%.*}
          MINOR=${VERSION%.*}
          MINOR=${MINOR#*.}
          PATCH=${VERSION##*.}
          echo "::set-output name=version::${VERSION}"
          echo "::set-output name=linuxdir::ankisyncd_${MAJOR}.${MINOR}.${PATCH}_linux_x86_64_glibc"
          echo "::set-output name=macosdir::ankisyncd_${MAJOR}.${MINOR}.${PATCH}_macOS_x86_64"
          echo "::set-output name=windowsdir::ankisyncd_${MAJOR}.${MINOR}.${PATCH}_windows"
          echo "::set-output name=armv7dir::ankisyncd_${MAJOR}.${MINOR}.${PATCH}_linux_armv7_muslc"
          echo "::set-output name=innerdir::ankisyncd-${VERSION}"
      - name: Create Release Draft
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.info.outputs.version }} Release
          draft: true
      
      - name: Create armv7 Directory
        run: mkdir -p ${{ steps.info.outputs.armv7dir }}

      - name: Download armv7 Artifacts
        uses: actions/download-artifact@v2
        with:
          name: armv7
          path: ${{ steps.info.outputs.armv7dir }}

      - name: Restore armv7 File Modes
        run: |
          chmod 755 ${{ steps.info.outputs.armv7dir }}/ankisyncd*

      - name: Create armv7 tarball
        run: tar -zcvf ${{ steps.info.outputs.armv7dir }}.tar.gz ${{ steps.info.outputs.armv7dir }}

      - name: Upload armv7 Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.info.outputs.armv7dir }}.tar.gz
          asset_name: ${{ steps.info.outputs.armv7dir }}.tar.gz
          asset_content_type: application/gzip

      - name: Create Linux Directory
        run: mkdir -p ${{ steps.info.outputs.linuxdir }}

      - name: Download Linux Artifacts
        uses: actions/download-artifact@v2
        with:
          name: linux
          path: ${{ steps.info.outputs.linuxdir }}

      - name: Restore Linux File Modes
        run: |
          chmod 755 ${{ steps.info.outputs.linuxdir }}/ankisyncd*

      - name: Create Linux tarball
        run: tar -zcvf ${{ steps.info.outputs.linuxdir }}.tar.gz ${{ steps.info.outputs.linuxdir }}

      - name: Upload Linux Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.info.outputs.linuxdir }}.tar.gz
          asset_name: ${{ steps.info.outputs.linuxdir }}.tar.gz
          asset_content_type: application/gzip

      - name: Create macOS Directory
        run: mkdir -p ${{ steps.info.outputs.macosdir }}

      - name: Download macOS Artifacts
        uses: actions/download-artifact@v2
        with:
          name: macos
          path: ${{ steps.info.outputs.macosdir }}

      - name: Restore macOS File Modes
        run: chmod 755 ${{ steps.info.outputs.macosdir }}/ankisyncd*

      - name: Create macOS Archive
        run: zip -r ${{ steps.info.outputs.macosdir }}.zip ${{ steps.info.outputs.macosdir }}

      - name: Upload macOS Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.info.outputs.macosdir }}.zip
          asset_name: ${{ steps.info.outputs.macosdir }}.zip
          asset_content_type: application/zip

      - name: Create Windows Directory
        run: mkdir -p ${{ steps.info.outputs.windowsdir }}

      - name: Download Windows artifact
        uses: actions/download-artifact@v2
        with:
          name: windows
          path: ${{ steps.info.outputs.windowsdir }}

      - name: Show Windows Artifacts
        run: ls -la ${{ steps.info.outputs.windowsdir }}

      # - name: Create Windows Archive
      #   run: zip -r ${{ steps.info.outputs.windowsdir }}.zip ${{ steps.info.outputs.windowsdir }}

      - name: Upload Windows binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.info.outputs.windowsdir }}/ankisyncd.exe
          asset_name: ankisyncd.exe
          asset_content_type: application/x-executable