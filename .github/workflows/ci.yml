on: [pull_request]

name: Continuous integration

jobs:
  arm:
    name: Build Arm
    runs-on: ubuntu-latest
    # after every step is finished,export to path will be clear,so in next step ,need re-export
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up cargo
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
# this may not succeed?
      - name: Add cargo taget armv7
        run: rustup target add armv7-unknown-linux-musleabihf

      - name: Download musl-gcc
        run: |
          wget  -P $HOME https://musl.cc/arm-linux-musleabihf-cross.tgz

      - name: unpack musl-gcc
        run: |
          tar -zxvf $HOME/arm-linux-musleabihf-cross.tgz -C $HOME
      # used to compile openssl
      - name: Download arm-gnueabihf-gcc 
        run: |
          git clone --depth 1 https://github.com/raspberrypi/tools.git $HOME/rpitools
          export PATH="$HOME/rpitools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin:$PATH"
          arm-linux-gnueabihf-gcc -v

      - name: Download and unpack lib openssl
        run: | 
          wget --no-check-certificate https://www.openssl.org/source/old/1.1.1/openssl-1.1.1f.tar.gz
          tar -zxvf openssl-1.1.1f.tar.gz -C .
          ls .
      
      - name: Compile openssl
        run: | 
          export PATH="$HOME/rpitools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin:$PATH"
          arm-linux-gnueabihf-gcc -v

          export MACHINE=armv7
          export ARCH=arm
          export CC=arm-linux-gnueabihf-gcc
          cc -v

          mkdir -p $HOME/openssl
          cd openssl-1.1.1f
          ./config shared --prefix=$HOME/openssl && make 
          make install
          cd ..
          ls $HOME/openssl/include

        #   export CC=arm-linux-gnueabihf-gcc
        #   arm-linux-gnueabihf-gcc -v
      - name: Build 
        run: | 
          ls $HOME/openssl/lib
          export PATH="$HOME/rpitools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin:$PATH"
          export CC=arm-linux-gnueabihf-gcc
          
          export OPENSSL_LIB_DIR=$HOME/openssl/lib
          export OPENSSL_INCLUDE_DIR=$HOME/openssl/include
          export OPENSSL_STATIC=true

          export PATH="$HOME/arm-linux-musleabihf-cross/bin:$PATH"
          
          cargo build --target armv7-unknown-linux-musleabihf --release
  ci:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, macos-latest, ubuntu-latest]
        style: [all, default, minimal]
        rust:
          - stable
        include:
          - style: all
            flags: '--all-features'
          - style: default
            flags: ''
          - style: minimal
            flags: '--no-default-features'
        exclude:
          - platform: windows-latest
            style: default
          - platform: windows-latest
            style: minimal
          - platform: macos-latest
            style: default
          - platform: macos-latest
            style: minimal

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v2

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

      - name: Rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          # args: --all -- --check

      - name: Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          # args: --all ${{ matrix.flags }} -- -D warnings -D clippy::unwrap_used -A clippy::needless_collect

      - name: Build Ankisyncd
        uses: actions-rs/cargo@v1
        with:
          command: build
          # args: ${{ matrix.flags }}

      - name: Tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          # args: --all ${{ matrix.flags }}